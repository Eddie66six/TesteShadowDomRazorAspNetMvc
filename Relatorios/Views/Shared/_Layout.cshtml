<div id="renderBody"></div>
<script id="containerScript">
    thisScript = document.getElementById('containerScript');
    body = `@RenderBody()`;
    scriptsLink = [];
    stylesLink = [];
    //obtem os scripts locais
    if (body.indexOf('script-->') > -1) {
        scriptsLink = body.substring(0, body.indexOf('script-->') + 9).replace('<!--', '').replace('script-->', '').replace(/\n|\r/g, "").split(';');
        scriptsLink = scriptsLink[scriptsLink.length - 1] == '' ? scriptsLink.splice(0, scriptsLink.length - 1) : scriptsLink;
    }
    //link script geral
    scriptsLink.push('https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js');
    scriptsLink.push('https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js');
    //link script geral
    stylesLink.push('https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css');

    myElement = document.getElementById('renderBody');
    myElement.id = newGuid();
    shadow = myElement.attachShadow({
        mode: 'closed'
    });
    scriptRef = document.createElement('script');

    function baixarPacote(url, callback) {
        var request = new XMLHttpRequest();
        request.onload = callback;
        request.open("get", url, true);
        request.send(null);
    }

    index = 0;
    adicionarPacotes();
    function adicionarPacotes() {
        if (index < scriptsLink.length) {
            baixarPacote(scriptsLink[index], adicionarScript);
            index++;
        }
        else {
            finalizar();
        }
    }

    function adicionarScript(data) {
        scriptRef.textContent += data.target.responseText + ';';
        adicionarPacotes();
    }

    function finalizar() {
        var html = document.createElement('div');
        html.innerHTML = body.indexOf('script-->') > -1 ? body.substring(body.indexOf('script-->') + 9, body.length) : body;
        //adiciona link css local
        for (var index = 0; index < stylesLink.length; index++) {
            var cssLink = document.createElement('link');
            cssLink.rel  = 'stylesheet';
            cssLink.type = 'text/css';
            cssLink.href = stylesLink[index];
            shadow.appendChild(cssLink);
        }
        shadow.appendChild(html);
        shadow.appendChild(scriptRef);

        delete body;
        delete scriptsLink;
        delete myElement;
        delete shadow;
        delete scriptRef;
        delete index;

        thisScript.parentNode.removeChild(thisScript);
    }

    function newGuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
</script>